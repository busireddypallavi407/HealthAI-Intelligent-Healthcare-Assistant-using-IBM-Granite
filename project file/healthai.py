# -*- coding: utf-8 -*-
"""healthai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qFEo4INqjKy7TiFjP7BA3ddKYC9PrvAc
"""

!pip install gradio pandas matplotlib requests

import gradio as gr
import pandas as pd
import requests
import matplotlib.pyplot as plt
import io

# Replace with your IBM credentials
IBM_API_KEY = "your_ibm_api_key_here"
IBM_GRANITE_URL = "https://your_granite_endpoint_here"

# ðŸ”¹ API Call Function
def call_ibm_granite(prompt):
    headers = {
        "Authorization": f"Bearer {IBM_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "granite-13b-instruct-v2",
        "input": prompt,
        "parameters": {
            "temperature": 0.7,
            "max_tokens": 500
        }
    }
    try:
        response = requests.post(IBM_GRANITE_URL, json=payload, headers=headers)
        response.raise_for_status()
        return response.json().get("generated_text", "No response.")
    except Exception as e:
        return f"Error: {str(e)}"

# ðŸ§  Scenario 1: Disease Prediction
def predict_disease(symptoms, age, gender):
    prompt = f"A {age}-year-old {gender} reports: {symptoms}. Predict possible conditions and next steps."
    return call_ibm_granite(prompt)

# ðŸ’Š Scenario 2: Treatment Plan
def treatment_plan(condition):
    prompt = f"Provide an evidence-based treatment plan for: {condition}."
    return call_ibm_granite(prompt)

# ðŸ“Š Scenario 3: Health Analytics
def analyze_health(file_obj):
    df = pd.read_csv(file_obj.name)
    fig, ax = plt.subplots(figsize=(10, 4))
    if 'Date' in df.columns:
        df['Date'] = pd.to_datetime(df['Date'])
        df.set_index('Date', inplace=True)
    df.plot(ax=ax)
    plt.title("Health Metrics Over Time")
    plt.grid(True)

    prompt = f"Analyze this patient data:\n{df.head().to_string(index=False)}"
    analysis = call_ibm_granite(prompt)

    buf = io.BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    return analysis, buf

# ðŸ—£ Scenario 4: Patient Chat
def patient_chat(question):
    prompt = f"You are a medical assistant. Respond clearly and empathetically:\n{question}"
    return call_ibm_granite(prompt)

# ðŸŽ› Gradio Interface
with gr.Blocks(title="HealthAI Assistant") as demo:
    gr.Markdown("# ðŸ©º HealthAI - IBM Granite-Powered Medical Assistant")

    with gr.Tab("ðŸ§  Disease Prediction"):
        symptoms = gr.Textbox(label="Describe your symptoms")
        age = gr.Number(label="Age", value=30)
        gender = gr.Dropdown(["Male", "Female", "Other"], label="Gender")
        disease_result = gr.Textbox(label="Prediction", lines=10)
        gr.Button("Predict").click(predict_disease, inputs=[symptoms, age, gender], outputs=disease_result)

    with gr.Tab("ðŸ’Š Treatment Plan"):
        condition_input = gr.Textbox(label="Enter condition")
        treatment_result = gr.Textbox(label="Plan", lines=10)
        gr.Button("Generate Plan").click(treatment_plan, inputs=condition_input, outputs=treatment_result)

    with gr.Tab("ðŸ“Š Health Analytics"):
        file_input = gr.File(label="Upload Health Data (CSV)")
        insights_output = gr.Textbox(label="AI Insights", lines=10)
        chart_output = gr.Image(label="Trend Graph")
        gr.Button("Analyze").click(analyze_health, inputs=file_input, outputs=[insights_output, chart_output])

    with gr.Tab("ðŸ—£ Patient Chat"):
        chat_input = gr.Textbox(label="Ask a health question")
        chat_output = gr.Textbox(label="AI Response", lines=10)
        gr.Button("Ask").click(patient_chat, inputs=chat_input, outputs=chat_output)

demo.launch()